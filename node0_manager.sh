#!/bin/bash
# Node0 Pluralis Manager - Fixed Version
# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ü—É—Ç–∏
NODE0_DIR="$HOME/node0"
CONDA_ENV="node0"
CONDA_HOME="$HOME/miniconda3"
CONFIG_FILE="$HOME/.node0_config"

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è conda
init_conda() {
    if [ -f "$CONDA_HOME/bin/conda" ]; then
        eval "$($CONDA_HOME/bin/conda shell.bash hook)"
        return 0
    fi
    return 1
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ sudo
    if command -v sudo &> /dev/null; then
        sudo apt update && sudo apt upgrade -y
        sudo apt install -y screen curl iptables build-essential git wget lz4 jq make gcc nano \
            automake autoconf tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev \
            tar clang bsdmainutils ncdu unzip python3-pip python3-dev
    else
        # –ë–µ–∑ sudo (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö VPS)
        apt update && apt upgrade -y
        apt install -y screen curl iptables build-essential git wget lz4 jq make gcc nano \
            automake autoconf tmux htop nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev \
            tar clang bsdmainutils ncdu unzip python3-pip python3-dev
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Conda
install_conda() {
    if [ -f "$CONDA_HOME/bin/conda" ]; then
        log "Conda —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        return 0
    fi
    
    log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Miniconda..."
    
    mkdir -p ~/miniconda3
    wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
    bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
    rm ~/miniconda3/miniconda.sh
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º conda
    "$CONDA_HOME/bin/conda" init bash
    
    log "Conda —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º shell..."
    source ~/.bashrc
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞
create_start_script() {
    local hf_token="$1"
    local email="$2"
    local announce_port="$3"
    
    cd "$NODE0_DIR"
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º conda –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    init_conda
    conda activate "$CONDA_ENV"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç
    if [ -z "$announce_port" ]; then
        python generate_script.py --host_port 49200 --token "$hf_token" --email "$email" <<< "n"
    else
        python generate_script.py --host_port 49200 --announce_port "$announce_port" --token "$hf_token" --email "$email" <<< "n"
    fi
    
    # –°–æ–∑–¥–∞–µ–º wrapper –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    cat > start_node0_wrapper.sh << 'EOF'
#!/bin/bash
set -e

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è conda
export PATH="$HOME/miniconda3/bin:$PATH"
eval "$($HOME/miniconda3/bin/conda shell.bash hook)"

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
conda activate node0

# –ü—Ä–æ–≤–µ—Ä–∫–∞
echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==="
echo "Python: $(which python)"
echo "Version: $(python --version)"
echo "Conda env: $CONDA_DEFAULT_ENV"
echo "=========================="

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
./start_server.sh
EOF
    
    chmod +x start_node0_wrapper.sh
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π start_server.sh
    if [ -f "start_server.sh" ]; then
        sed -i 's/python3\.11/python/g' start_server.sh
        sed -i 's/python3/python/g' start_server.sh
        chmod +x start_server.sh
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node0
install_node0() {
    clear
    echo -e "${YELLOW}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node0 Pluralis${NC}\n"
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if ! command -v git &> /dev/null; then
        install_dependencies
    fi
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Conda
    if [ ! -f "$CONDA_HOME/bin/conda" ]; then
        install_conda
    fi
    
    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º conda –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    init_conda
    
    # 4. –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    log "–ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
    if [ -d "$NODE0_DIR" ]; then
        warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $NODE0_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–£–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " reinstall
        if [ "$reinstall" = "y" ] || [ "$reinstall" = "Y" ]; then
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º private.key –µ—Å–ª–∏ –µ—Å—Ç—å
            if [ -f "$NODE0_DIR/private.key" ]; then
                cp "$NODE0_DIR/private.key" ~/private.key.backup
                log "private.key —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ~/private.key.backup"
            fi
            rm -rf "$NODE0_DIR"
        else
            log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
            read -p "Enter..."
            return
        fi
    fi
    
    git clone https://github.com/PluralisResearch/node0 "$NODE0_DIR"
    cd "$NODE0_DIR"
    
    # 5. –°–æ–∑–¥–∞–µ–º conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    log "–°–æ–∑–¥–∞–µ–º conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å Python 3.11..."
    conda create -n "$CONDA_ENV" python=3.11 -y
    
    # 6. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    conda activate "$CONDA_ENV"
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python..."
    python_version=$(python --version 2>&1)
    echo "Python –≤–µ—Ä—Å–∏—è: $python_version"
    
    if ! echo "$python_version" | grep -q "3.11"; then
        error "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Python!"
        conda install python=3.11 -y
    fi
    
    # 8. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node0
    log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node0..."
    pip install --upgrade pip
    pip install .
    
    # 9. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º private.key –µ—Å–ª–∏ –±—ã–ª
    if [ -f ~/private.key.backup ]; then
        cp ~/private.key.backup "$NODE0_DIR/private.key"
        log "private.key –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # 10. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    echo -e "\n${BLUE}=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node0 ===${NC}"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        echo "–ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
        echo "Email: ${SAVED_EMAIL:-–Ω–µ –∑–∞–¥–∞–Ω}"
        echo "Token: ${SAVED_TOKEN:0:10}... (—Å–∫—Ä—ã—Ç)" 
        echo "Announce port: ${SAVED_ANNOUNCE_PORT:-–Ω–µ –∑–∞–¥–∞–Ω}"
        echo ""
        read -p "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): " use_saved
        
        if [ "$use_saved" = "y" ] || [ "$use_saved" = "Y" ]; then
            HF_TOKEN="$SAVED_TOKEN"
            EMAIL_ADDRESS="$SAVED_EMAIL"
            ANNOUNCE_PORT="$SAVED_ANNOUNCE_PORT"
        else
            HF_TOKEN=""
            EMAIL_ADDRESS=""
            ANNOUNCE_PORT=""
        fi
    fi
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [ -z "$HF_TOKEN" ]; then
        echo ""
        echo "–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:"
        echo "1. HuggingFace —Ç–æ–∫–µ–Ω: https://huggingface.co/settings/tokens"
        echo "2. Email –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ dashboard"
        echo "3. Announce port (—Ç–æ–ª—å–∫–æ –¥–ª—è Vast, –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ)"
        echo ""
        
        read -p "HuggingFace —Ç–æ–∫–µ–Ω: " HF_TOKEN
        while [ -z "$HF_TOKEN" ]; do
            error "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!"
            read -p "HuggingFace —Ç–æ–∫–µ–Ω: " HF_TOKEN
        done
        
        read -p "Email –∞–¥—Ä–µ—Å: " EMAIL_ADDRESS
        while [ -z "$EMAIL_ADDRESS" ]; do
            error "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!"
            read -p "Email –∞–¥—Ä–µ—Å: " EMAIL_ADDRESS
        done
        
        read -p "Announce port (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): " ANNOUNCE_PORT
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cat > "$CONFIG_FILE" << EOF
SAVED_TOKEN='$HF_TOKEN'
SAVED_EMAIL='$EMAIL_ADDRESS'
SAVED_ANNOUNCE_PORT='$ANNOUNCE_PORT'
EOF
        chmod 600 "$CONFIG_FILE"
        log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
    fi
    
    # 11. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
    log "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞..."
    create_start_script "$HF_TOKEN" "$EMAIL_ADDRESS" "$ANNOUNCE_PORT"
    
    echo -e "\n${GREEN}‚úÖ Node0 —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!${NC}"
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–Ω–∫—Ç 2 –¥–ª—è –∑–∞–ø—É—Å–∫–∞${NC}"
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –ó–∞–ø—É—Å–∫ Node0
start_node0() {
    clear
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ Node0${NC}\n"
    
    if [ ! -d "$NODE0_DIR" ]; then
        error "Node0 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
        read -p "Enter..."
        return
    fi
    
    cd "$NODE0_DIR"
    
    if [ ! -f "start_node0_wrapper.sh" ] && [ ! -f "start_server.sh" ]; then
        error "–°–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node0."
        read -p "Enter..."
        return
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    tmux kill-session -t node0 2>/dev/null || true
    rm -f /tmp/hivemind* 2>/dev/null || true
    
    # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É
    if command -v lsof &> /dev/null; then
        for pid in $(lsof -t -i tcp:49200 2>/dev/null); do
            kill -9 $pid 2>/dev/null || true
        done
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ tmux
    log "–ó–∞–ø—É—Å–∫–∞–µ–º Node0 –≤ tmux —Å–µ—Å—Å–∏–∏..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º wrapper –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    if [ -f "start_node0_wrapper.sh" ]; then
        tmux new-session -d -s node0 "cd $NODE0_DIR && ./start_node0_wrapper.sh"
    else
        tmux new-session -d -s node0 "cd $NODE0_DIR && bash -c 'source $CONDA_HOME/bin/activate && conda activate $CONDA_ENV && ./start_server.sh'"
    fi
    
    sleep 3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –ª–∏
    if tmux has-session -t node0 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Node0 –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}\n"
        echo -e "${BLUE}–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:${NC}"
        echo -e "  –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–≥–∞–º: ${YELLOW}tmux attach -t node0${NC}"
        echo -e "  –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –ª–æ–≥–æ–≤: ${YELLOW}Ctrl+B, –∑–∞—Ç–µ–º D${NC}"
        echo -e "  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏: ${YELLOW}tail -f $NODE0_DIR/logs/server.log${NC}"
        echo ""
        echo -e "${GREEN}Dashboard: https://dashboard.pluralis.ai/${NC}"
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Node0!"
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
    fi
    
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Node0
stop_node0() {
    log "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node0..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tmux —Å–µ—Å—Å–∏—é
    tmux kill-session -t node0 2>/dev/null || true
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    rm -f /tmp/hivemind* 2>/dev/null || true
    
    # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É
    if command -v lsof &> /dev/null; then
        for pid in $(lsof -t -i tcp:49200 2>/dev/null); do
            kill -9 $pid 2>/dev/null || true
        done
    fi
    
    log "Node0 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ tmux
connect_tmux() {
    clear
    if tmux has-session -t node0 2>/dev/null; then
        echo -e "${BLUE}–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Node0...${NC}"
        echo -e "${YELLOW}–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: Ctrl+B, –∑–∞—Ç–µ–º D${NC}"
        sleep 2
        tmux attach -t node0
    else
        error "Node0 –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!"
        echo -e "${YELLOW}–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Node0 (–ø—É–Ω–∫—Ç 2)${NC}"
        read -p "Enter..."
    fi
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
view_logs() {
    clear
    echo -e "${BLUE}=== –õ–æ–≥–∏ Node0 ===${NC}\n"
    
    if [ ! -d "$NODE0_DIR" ]; then
        error "Node0 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        read -p "Enter..."
        return
    fi
    
    echo "1) –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫"
    echo "2) –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "3) –ü–æ–ª–Ω—ã–π –ª–æ–≥"
    echo "0) –ù–∞–∑–∞–¥"
    echo ""
    read -p "–í—ã–±–æ—Ä: " log_choice
    
    case $log_choice in
        1)
            if [ -f "$NODE0_DIR/logs/server.log" ]; then
                tail -n 50 "$NODE0_DIR/logs/server.log"
            else
                echo "–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            read -p "Enter..."
            ;;
        2)
            if [ -f "$NODE0_DIR/logs/server.log" ]; then
                echo -e "${YELLOW}–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${NC}"
                sleep 2
                tail -f "$NODE0_DIR/logs/server.log"
            else
                echo "–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
                read -p "Enter..."
            fi
            ;;
        3)
            if [ -f "$NODE0_DIR/logs/server.log" ]; then
                less "$NODE0_DIR/logs/server.log"
            else
                echo "–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
                read -p "Enter..."
            fi
            ;;
        *)
            ;;
    esac
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Node0
update_node0() {
    clear
    echo -e "${YELLOW}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Node0${NC}\n"
    
    if [ ! -d "$NODE0_DIR" ]; then
        error "Node0 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        read -p "Enter..."
        return
    fi
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
    stop_node0
    
    cd "$NODE0_DIR"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    if [ -f "private.key" ]; then
        cp private.key ~/private.key.backup
        log "private.key —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    log "–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    git stash 2>/dev/null || true
    git pull
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    init_conda
    conda activate "$CONDA_ENV"
    
    log "–û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã Python..."
    pip install --upgrade pip
    pip install --upgrade .
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º private.key
    if [ -f ~/private.key.backup ]; then
        cp ~/private.key.backup private.key
    fi
    
    # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
        create_start_script "$SAVED_TOKEN" "$SAVED_EMAIL" "$SAVED_ANNOUNCE_PORT"
    fi
    
    echo -e "${GREEN}‚úÖ Node0 —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!${NC}"
    read -p "Enter..."
}

# –£–¥–∞–ª–µ–Ω–∏–µ Node0
remove_node0() {
    clear
    echo -e "${RED}‚ö†Ô∏è  –£–î–ê–õ–ï–ù–ò–ï NODE0${NC}\n"
    echo -e "${YELLOW}–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:${NC}"
    echo "  - –í—Å–µ —Ñ–∞–π–ª—ã Node0"
    echo "  - Conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
    echo "  - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    echo ""
    echo -e "${GREEN}–ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:${NC}"
    echo "  - private.key -> ~/private.key.backup"
    echo ""
    echo -e "${RED}–í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:${NC} "
    read confirm
    
    if [ "$confirm" = "YES" ]; then
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        stop_node0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º private.key
        if [ -f "$NODE0_DIR/private.key" ]; then
            cp "$NODE0_DIR/private.key" ~/private.key.backup
            log "private.key —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ~/private.key.backup"
        fi
        
        # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        log "–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã..."
        rm -rf "$NODE0_DIR"
        
        # –£–¥–∞–ª—è–µ–º conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if init_conda; then
            log "–£–¥–∞–ª—è–µ–º conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
            conda remove -n "$CONDA_ENV" --all -y 2>/dev/null || true
        fi
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        read -p "–£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? (y/n): " del_config
        if [ "$del_config" = "y" ] || [ "$del_config" = "Y" ]; then
            rm -f "$CONFIG_FILE"
        fi
        
        echo -e "${GREEN}‚úÖ Node0 —É–¥–∞–ª–µ–Ω–∞${NC}"
    else
        echo -e "${YELLOW}–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ${NC}"
    fi
    read -p "Enter..."
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    echo -e "${BLUE}=== –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã ===${NC}\n"
    
    # Node0 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞?
    if [ -d "$NODE0_DIR" ]; then
        echo -e "Node0: ${GREEN}–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º private.key
        if [ -f "$NODE0_DIR/private.key" ]; then
            echo -e "Private key: ${GREEN}–ù–∞–π–¥–µ–Ω${NC}"
        else
            echo -e "Private key: ${YELLOW}–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
        fi
    else
        echo -e "Node0: ${RED}–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
    fi
    
    # Conda
    if [ -f "$CONDA_HOME/bin/conda" ]; then
        echo -e "Conda: ${GREEN}–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if init_conda && conda env list | grep -q "$CONDA_ENV"; then
            echo -e "–û–∫—Ä—É–∂–µ–Ω–∏–µ $CONDA_ENV: ${GREEN}–°–æ–∑–¥–∞–Ω–æ${NC}"
        else
            echo -e "–û–∫—Ä—É–∂–µ–Ω–∏–µ $CONDA_ENV: ${RED}–ù–µ –Ω–∞–π–¥–µ–Ω–æ${NC}"
        fi
    else
        echo -e "Conda: ${RED}–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
    fi
    
    # Tmux —Å–µ—Å—Å–∏—è
    if tmux has-session -t node0 2>/dev/null; then
        echo -e "–ü—Ä–æ—Ü–µ—Å—Å: ${GREEN}üü¢ –†–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "–ü—Ä–æ—Ü–µ—Å—Å: ${RED}üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if [ -f "$CONFIG_FILE" ]; then
        echo -e "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${GREEN}–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞${NC}"
    else
        echo -e "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${YELLOW}–ù–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
    fi
    
    echo ""
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
while true; do
    clear
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë       NODE0 PLURALIS MANAGER v2       ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"
    
    check_status
    
    echo -e "${YELLOW}–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:${NC}"
    echo "  1) üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Node0"
    echo "  2) ‚ñ∂Ô∏è  –ó–∞–ø—É—Å—Ç–∏—Ç—å Node0"
    echo "  3) üì∫ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Å–æ–ª–∏"
    echo "  4) üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo ""
    echo -e "${BLUE}–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:${NC}"
    echo "  5) üîÑ –û–±–Ω–æ–≤–∏—Ç—å Node0"
    echo "  6) ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Node0"
    echo "  7) üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å Node0"
    echo ""
    echo "  0) –í—ã—Ö–æ–¥"
    echo ""
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: " choice
    
    case $choice in
        1) install_node0 ;;
        2) start_node0 ;;
        3) connect_tmux ;;
        4) view_logs ;;
        5) update_node0 ;;
        6) 
            stop_node0
            echo -e "${GREEN}Node0 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
            read -p "Enter..."
            ;;
        7) remove_node0 ;;
        0) 
            echo -e "${GREEN}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}"
            exit 0 
            ;;
        *) 
            error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!"
            sleep 1
            ;;
    esac
done
