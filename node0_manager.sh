#!/bin/bash
# Node0 Minimal Manager - FIXED VERSION
# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ü—É—Ç–∏
NODE0_DIR="$HOME/node0"
CONDA_ENV="node0"
MINICONDA_DIR="$HOME/miniconda3"

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —É—Å—Ç–∞–Ω–æ–≤–∫–∞ conda
install_conda() {
    log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Miniconda..."
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    [ -d "$MINICONDA_DIR" ] && rm -rf "$MINICONDA_DIR"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash miniconda.sh -b -p "$MINICONDA_DIR"
    rm miniconda.sh
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º conda
    "$MINICONDA_DIR/bin/conda" init bash
    source ~/.bashrc
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ PATH –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    export PATH="$MINICONDA_DIR/bin:$PATH"
    
    log "Conda —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞
install_node0() {
    clear
    echo -e "${YELLOW}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node0${NC}\n"
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    log "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    sudo apt update
    sudo apt install -y git curl wget build-essential tmux lsof python3-full
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ufw –µ—Å–ª–∏ –Ω–µ—Ç
    if ! command -v ufw &> /dev/null; then
        sudo apt install -y ufw
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º conda
    if ! command -v conda &> /dev/null; then
        install_conda
    fi
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ conda –≤ PATH
    export PATH="$MINICONDA_DIR/bin:$PATH"
    
    # –°–û–ó–î–ê–ï–ú –û–ö–†–£–ñ–ï–ù–ò–ï –°–ù–ê–ß–ê–õ–ê
    log "–°–æ–∑–¥–∞–µ–º conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ node0..."
    conda create -n "$CONDA_ENV" python=3.11 -y
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
    if ! conda env list | grep -q "$CONDA_ENV"; then
        error "–ë–ª—è–¥—å, –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–ª–æ—Å—å!"
        exit 1
    fi
    
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    log "–ö–ª–æ–Ω–∏—Ä—É–µ–º Node0..."
    [ -d "$NODE0_DIR" ] && rm -rf "$NODE0_DIR"
    git clone https://github.com/VaniaHilkovets/node0 "$NODE0_DIR"
    cd "$NODE0_DIR"
    
    # –ê–ö–¢–ò–í–ò–†–£–ï–ú –û–ö–†–£–ñ–ï–ù–ò–ï –ò –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú
    log "–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    source "$MINICONDA_DIR/bin/activate" "$CONDA_ENV"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    pip install --upgrade pip
    pip install -r requirements.txt 2>/dev/null || pip install torch torchvision transformers datasets accelerate
    pip install -e . 2>/dev/null || log "–ü—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
    
    # –°–æ–∑–¥–∞–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô start_server.sh
    log "–°–æ–∑–¥–∞–µ–º start_server.sh..."
    cat > start_server.sh << 'EOF'
#!/bin/bash
echo "=== –ó–∞–ø—É—Å–∫ Node0 ==="

# –°–ù–ê–ß–ê–õ–ê –ê–ö–¢–ò–í–ò–†–£–ï–ú –û–ö–†–£–ñ–ï–ù–ò–ï
echo "–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ node0..."
source ~/miniconda3/bin/activate node0

echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ:"
echo "Python: $(which python)"
echo "Version: $(python --version)"
echo "Conda env: $CONDA_DEFAULT_ENV"

# –¢–ï–ü–ï–†–¨ –ó–ê–ü–£–°–ö–ê–ï–ú –ù–û–î–£
echo "–ó–∞–ø—É—Å–∫–∞–µ–º Node0..."
cd ~/node0

# –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞
if [ -f "main.py" ]; then
    python main.py
elif [ -f "server.py" ]; then
    python server.py
elif [ -f "start.py" ]; then
    python start.py
else
    echo "–ò—â–µ–º Python —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:"
    find . -name "*.py" -type f | head -5
    echo "–ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é Python"
    python
fi
EOF
    chmod +x start_server.sh
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞
    sudo ufw allow 49200/tcp 2>/dev/null
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    echo -e "\n${RED}–ù—É–∂–µ–Ω —Ç–æ–∫–µ–Ω HuggingFace: https://huggingface.co/settings/tokens${NC}"
    read -p "Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    
    if [ -f "generate_script.py" ]; then
        python generate_script.py
    else
        log "–°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è —Ç–æ–∫–µ–Ω–∞..."
        echo -n "–í–≤–µ–¥–∏—Ç–µ HuggingFace token: "
        read -s hf_token
        echo "HUGGINGFACE_TOKEN=$hf_token" > .env
        echo -e "\n–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
    fi
    
    echo -e "\n${GREEN}‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    read -p "Enter..."
}

# –ó–∞–ø—É—Å–∫
start_node0() {
    clear
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ Node0${NC}\n"
    
    if [ ! -d "$NODE0_DIR" ]; then
        error "Node0 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        read -p "Enter..."
        return
    fi
    
    # –£–±–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    tmux kill-session -t node0 2>/dev/null
    pkill -f "node0" 2>/dev/null
    sleep 2
    
    cd "$NODE0_DIR"
    
    # –°–û–ó–î–ê–ï–ú TMUX –°–ï–°–°–ò–Æ –ö–û–¢–û–†–ê–Ø –°–ù–ê–ß–ê–õ–ê –ê–ö–¢–ò–í–ò–†–£–ï–¢ –û–ö–†–£–ñ–ï–ù–ò–ï
    log "–ó–∞–ø—É—Å–∫–∞–µ–º –≤ tmux..."
    tmux new-session -d -s node0 "bash --login -c '
        echo \"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...\"
        export PATH=\"$MINICONDA_DIR/bin:\$PATH\"
        
        echo \"–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ node0...\"
        source $MINICONDA_DIR/bin/activate node0
        
        echo \"–û–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: \$CONDA_DEFAULT_ENV\"
        echo \"Python: \$(which python)\"
        
        cd $NODE0_DIR
        echo \"–ó–∞–ø—É—Å–∫–∞–µ–º start_server.sh...\"
        ./start_server.sh || exec bash
    '"
    
    sleep 3
    if tmux has-session -t node0 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Node0 –∑–∞–ø—É—â–µ–Ω–∞!${NC}"
        echo -e "${BLUE}–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: tmux attach -t node0${NC}"
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å"
    fi
    
    read -p "Enter..."
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏
attach_node0() {
    if tmux has-session -t node0 2>/dev/null; then
        echo -e "${BLUE}–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ node0...${NC}"
        tmux attach -t node0
    else
        error "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        read -p "Enter..."
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞
stop_node0() {
    clear
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Node0..."
    tmux kill-session -t node0 2>/dev/null
    pkill -f "node0" 2>/dev/null
    echo -e "${GREEN}‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
    read -p "Enter..."
}

# –£–¥–∞–ª–µ–Ω–∏–µ
remove_node0() {
    clear
    echo -e "${RED}–£–¥–∞–ª–∏—Ç—å –≤—Å–µ? –í–≤–µ–¥–∏—Ç–µ 'YES':${NC} "
    read confirm
    if [ "$confirm" = "YES" ]; then
        stop_node0 >/dev/null
        [ -f "$NODE0_DIR/private.key" ] && cp "$NODE0_DIR/private.key" ~/private.key.backup
        rm -rf "$NODE0_DIR"
        conda remove -n "$CONDA_ENV" --all -y 2>/dev/null
        echo -e "${GREEN}‚úÖ –£–¥–∞–ª–µ–Ω–æ${NC}"
    fi
    read -p "Enter..."
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
    clear
    echo -e "${BLUE}üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è${NC}\n"
    
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º conda..."
    if command -v conda &> /dev/null; then
        echo -e "${GREEN}‚úÖ conda –Ω–∞–π–¥–µ–Ω–∞${NC}"
        conda --version
    else
        echo -e "${RED}‚ùå conda –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
        export PATH="$MINICONDA_DIR/bin:$PATH"
    fi
    
    log "–°–ø–∏—Å–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏–π:"
    conda env list
    
    if conda env list | grep -q "$CONDA_ENV"; then
        echo -e "${GREEN}‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ node0 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
        
        log "–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
        source "$MINICONDA_DIR/bin/activate" "$CONDA_ENV"
        echo "Python: $(which python)"
        echo "Version: $(python --version)"
        python -c "print('Python —Ä–∞–±–æ—Ç–∞–µ—Ç!')"
    else
        echo -e "${RED}‚ùå –û–∫—Ä—É–∂–µ–Ω–∏–µ node0 –ù–ï –Ω–∞–π–¥–µ–Ω–æ${NC}"
        log "–°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
        conda create -n "$CONDA_ENV" python=3.11 -y
    fi
    
    read -p "Enter..."
}

# –ú–µ–Ω—é
while true; do
    clear
    echo -e "${BLUE}NODE0 MANAGER${NC}\n"
    
    if tmux has-session -t node0 2>/dev/null; then
        echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}üü¢ –†–∞–±–æ—Ç–∞–µ—Ç${NC}\n"
    else
        echo -e "–°—Ç–∞—Ç—É—Å: ${RED}üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}\n"
    fi
    
    echo "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É"
    echo "2) –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É" 
    echo "3) –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏"
    echo "4) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É"
    echo "5) –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É"
    echo "6) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
    echo "0) –í—ã—Ö–æ–¥"
    
    read -p "–í—ã–±–æ—Ä: " choice
    
    case $choice in
        1) install_node0 ;;
        2) start_node0 ;;
        3) attach_node0 ;;
        4) stop_node0 ;;
        5) remove_node0 ;;
        6) check_environment ;;
        0) exit 0 ;;
    esac
done
